<?php
/**
 * Single Theme Updater Class
**/
class prefix_Theme_Updater{

	/* Config */
	var $config;

	/**
	 * Class Constructor
	 */
	public function __construct( $config = array() ) {

		/* Config */
		$defaults = array(
			'repo_uri'    => '',
			'repo_slug'   => '',
			'theme'       => get_template(),
			'post'        => array(),
		);
		$this->config = wp_parse_args( $config, $defaults );
		$this->config['post']['updater_version'] = '1.0.0';
		$this->config['post']['updater_type'] = 'theme';

		/* Add update data */
		add_filter( 'pre_set_site_transient_update_themes', array( $this, 'add_update_data' ), 10, 2 );

		/* Fix theme folder */
		add_filter( 'upgrader_source_selection', array( $this, 'fix_theme_folder' ), 10, 3);
	}

	/**
	 * Add update data if available
	 */
	public function add_update_data( $value, $transient ){

		/* This theme data */
		$theme = $this->config['theme'];
		$theme_data = wp_get_theme( $theme );

		/* Check if "response" object is set */
		if( isset( $value->response ) ){


			/* New data from server */
			$update_data = $this->get_update_data();

			/* Check if new version available */
			if( version_compare( $theme_data->get( 'Version' ), $update_data['version'], "<" ) ){

				$data = array(
					'theme'       => $theme,
					'new_version' => $update_data['version'],
					'url'         => $theme_data->get( 'ThemeURI' ),
					'package'     => $update_data['download_link'],
				);

				/* Add update data */
				$value->response[$theme] = $data;
			}

			/* No new version, always remove update data (from w.org) */
			else{
				unset( $value->response[$theme] );
			}
		}
		return $value;
	}

	/**
	 * Get update data from server
	 */
	public function get_update_data(){

		/* Get WP Version */
		global $wp_version;

		/* Var default */
		$update_data = array(
			'version'       => '',
			'download_link' => '',
		);

		/* Remote Options */
		$options = array(
			'timeout'    => 20,
			'body'       => $this->config['post'],
			'user-agent' => 'WordPress/' . $wp_version . '; ' . get_bloginfo('url'),
		);
		/* Remote URL (HTTP) */
		$url = $http_url = add_query_arg(
			array(
				'fx_updater' => 'theme',
				'id'         => $this->config['repo_slug'],
			),
			set_url_scheme( $this->config['repo_uri'], 'http' )
		);
		if ( $ssl = wp_http_supports( array( 'ssl' ) ) ){
			$url = set_url_scheme( $url, 'https' );
		}

		/* Try HTTPS */
		$raw_response = wp_remote_post( esc_url_raw( $url ), $options );

		/* Fail, try HTTP */
		if ( is_wp_error( $raw_response ) ) {
			$raw_response = wp_remote_post( $http_url, $options );
		}

		/* Still Fail, bail. */
		if ( is_wp_error( $raw_response ) || 200 != wp_remote_retrieve_response_code( $raw_response ) ) {
			return $update_data;
		}

		/* Decode to array */
		$response = json_decode( trim( wp_remote_retrieve_body( $raw_response ) ), true );

		/* If version is set. */
		if( isset( $response['version'] ) ){
			$update_data = array(
				'version'       => esc_attr( $response['version'] ),
				'download_link' => esc_url_raw( $response['download_link'] ),
			);
		}

		return $update_data;
	}

	/**
	 * Fix theme folder
	 */
	public function fix_theme_folder( $source, $remote_source, $upgrader ){

		/* Active theme folder */
		$theme = $this->config['theme'];

		/* If theme name is set */
		if( isset( $upgrader->skin->theme_info->stylesheet ) ){


			/* Only in current theme */
			if ( $theme == $upgrader->skin->theme_info->stylesheet ){

				/* Add notification feedback text */
				$upgrader->skin->feedback( 'Trying to rename theme folder...' );

				/* only if everything is set */
				if( isset( $source, $remote_source ) ){

					/* Set new source to correct theme folder */
					$new_source = $remote_source . '/' . $theme . '/';

					/* rename the folder */
					if( @rename( $source, $new_source ) ){
						$upgrader->skin->feedback( _x( 'Renamed theme folder successfully.', 'updater', 'domain' ) );
						return $new_source;
					}
					/* Unable to rename the folder to correct theme folder */
					else{
						$upgrader->skin->feedback( _x( 'Unable to rename updated theme.', 'updater', 'domain' ) );
						return new WP_Error();
					}
				}
				/* Fallback */
				else{
					$upgrader->skin->feedback( _x( 'Source or Remote Source is unavailable.', 'updater', 'domain' ) );
				}
			}
		}
		return $source;
	}

}

