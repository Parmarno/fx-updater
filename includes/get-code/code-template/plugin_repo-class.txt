<?php
/**
 * Single Plugin Updater Class
**/
class prefix_Plugin_Updater{

	/* Config */
	var $config;

	/**
	 * Class Constructor
	 */
	public function __construct( $config = array() ) {

		/* Config */
		$defaults = array(
			'plugin'      => '',
			'repo_uri'    => '',
			'repo_slug'   => '',
			'post'        => array(),
		);
		$this->config = wp_parse_args( $config, $defaults );
		$this->config['post']['updater_version'] = '1.0.0';
		$this->config['post']['updater_type'] = 'plugin';

		/* Admin Init */
		add_action( 'admin_init', array( $this, 'admin_init' ) );

		/* Fix Plugin Folder */
		add_filter( 'upgrader_post_install', array( $this, 'fix_plugin_folder' ), 10, 3 );
	}

	/**
	 * Admin Init.
	 * Some functions only available in admin.
	 */
	public function admin_init(){

		/* Add update data */
		add_filter( 'pre_set_site_transient_update_plugins', array( $this, 'add_update_data' ), 10, 2 );

		/* Plugin Information */
		add_filter( 'plugins_api_result', array( $this, 'update_info' ), 10, 3 );
	}

	/**
	 * Add update data if available
	 */
	public function add_update_data( $value, $transient ){

		/* This plugin data */
		$plugin = $this->config['plugin'];
		$plugin_data = get_plugin_data( trailingslashit( WP_PLUGIN_DIR ) . $plugin );

		/* Check if "response" object is set */
		if( isset( $value->response ) ){

			/* New data from server */
			$update_data = $this->get_update_data();

			/* Check if new version available */
			if( version_compare( $plugin_data['Version'], $update_data['version'], "<" ) ){

				$data = new stdClass;
				$data->id          = '';
				$data->slug        = $plugin;
				$data->plugin      = $plugin;
				$data->new_version = $update_data['version'];
				$data->package     = $update_data['download_link'];
				$data->tested      = $update_data['tested'];

				/* Add update data */
				$value->response[$plugin] = $data;
			}

			/* No new version, always remove update data (from w.org) */
			else{
				unset( $value->response[$plugin] );
			}
		}
		return $value;
	}

	/**
	 * Update Info
	 */
	public function update_info( $res, $action, $args ){

		/* This plugin data */
		$plugin = $this->config['plugin'];
		$plugin_data = get_plugin_data( trailingslashit( WP_PLUGIN_DIR ) . $plugin );

		/* Check if this plugin info requested. */
		if( 'plugin_information' == $action && isset( $args->slug ) && $plugin == $args->slug ){

			/* New data from server */
			$update_data = $this->get_update_data();

			/* This plugin data */
			$data = new stdClass;
			$data->name             = $plugin_data['Name'];
			$data->slug             = $plugin;
			$data->external         = true;
			$data->version          = $update_data['version'];
			$data->requires         = $update_data['requires'];
			$data->tested           = $update_data['tested'];
			$data->last_updated     = $update_data['last_updated'];
			$data->sections         = $update_data['sections'];
			$data->download_link    = $update_data['download_link'];

			/* Add it */
			$res = $data;
		}

		return $res;
	}

	/**
	 * Get update data from server
	 */
	public function get_update_data(){

		/* Get WP Version */
		global $wp_version;

		/* Var default */
		$update_data = array(
			'version'       => '',
			'download_link' => '',
			'tested'        => '',
			'requires'      => '',
			'last_updated'  => '',
			'sections'      => array(
				'changelog' => '',
			),
		);

		/* Remote Options */
		$options = array(
			'timeout'    => 20,
			'body'       => $this->config['post'],
			'user-agent' => 'WordPress/' . $wp_version . '; ' . get_bloginfo('url'),
		);
		/* Remote URL (HTTP) */
		$url = $http_url = add_query_arg(
			array(
				'fx_updater' => 'plugin',
				'id'         => $this->config['repo_slug'],
			),
			set_url_scheme( $this->config['repo_uri'], 'http' )
		);
		if ( $ssl = wp_http_supports( array( 'ssl' ) ) ){
			$url = set_url_scheme( $url, 'https' );
		}

		/* Try HTTPS */
		$raw_response = wp_remote_post( esc_url_raw( $url ), $options );

		/* Fail, try HTTP */
		if ( is_wp_error( $raw_response ) ) {
			$raw_response = wp_remote_post( $http_url, $options );
		}

		/* Still Fail, bail. */
		if ( is_wp_error( $raw_response ) || 200 != wp_remote_retrieve_response_code( $raw_response ) ) {
			return $update_data;
		}

		/* Decode to array */
		$response = json_decode( trim( wp_remote_retrieve_body( $raw_response ) ), true );

		/* If version is set. */
		if( isset( $response['version'] ) ){
			$update_data = array(
				'version'       => esc_attr( $response['version'] ),
				'download_link' => esc_url_raw( $response['download_link'] ),
				'tested'        => esc_attr( $response['tested'] ),
				'requires'      => esc_attr( $response['requires'] ),
				'last_updated'  => esc_attr( $response['last_updated'] ),
				'sections'      => $response['sections'],
			);
		}

		return $update_data;
	}

	/**
	 * Fix Plugin Folder
	 */
	public function fix_plugin_folder( $true, $hook_extra, $result ){

		/* This plugin data */
		$plugin = $this->config['plugin'];
		$plugin_folder = dirname( $plugin );

		/* Check if hook extra is set */
		if ( isset( $hook_extra['plugin'] ) && $plugin == $hook_extra['plugin'] ){

			/* wp_filesystem api */
			global $wp_filesystem;

			/* Move & Activate */
			$proper_destination = trailingslashit( WP_PLUGIN_DIR ) . $plugin_folder;
			$wp_filesystem->move( $result['destination'], $proper_destination );
			$result['destination'] = $proper_destination;
			$activate = activate_plugin( $plugin );

			/* Update message */
			echo is_wp_error( $activate ) ? _x( 'Plugin could not be reactivated.', 'updater', 'domain' ) : _x( 'Plugin reactivated successfully.', 'updater', 'domain' );
		}

		return $true;
	}

}
