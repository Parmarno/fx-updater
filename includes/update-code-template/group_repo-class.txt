/**
 * Updater Class
**/
class {{prefix}}_Updater{

	/* Config */
	var $config;

	/**
	 * Class Constructor
	 */
	public function __construct( $config = array() ) {

		/* Config */
		$defaults = array(
			'repo_uri'    => '',
			'repo_group'  => '',
			'post'        => array(),
		);
		$this->config = wp_parse_args( $config, $defaults );

		/* Admin Init */
		add_action( 'admin_init', array( $this, 'admin_init' ) );

		/* Fix theme folder */
		add_filter( 'upgrader_source_selection', array( $this, 'fix_theme_folder' ), 10, 3);

		/* Fix Plugin Folder */
		add_filter( 'upgrader_post_install', array( $this, 'fix_plugin_folder' ), 10, 3 );
	}

	/**
	 * Admin Init.
	 * Some functions only available in admin.
	 */
	public function admin_init(){

		/* Add theme update data */
		add_filter( 'pre_set_site_transient_update_themes', array( $this, 'add_theme_update_data' ), 10, 2 );

		/* Add plugin update data */
		add_filter( 'pre_set_site_transient_update_plugins', array( $this, 'add_plugin_update_data' ), 10, 2 );

		/* Plugin Information */
		add_filter( 'plugins_api_result', array( $this, 'plugin_update_info' ), 10, 3 );
	}

	/**
	 * Add theme update data if available
	 */
	public function add_theme_update_data( $value, $transient ){

		/* Check if "response" object is set */
		if( isset( $value->response ) ){

			/* New data from server */
			$group_data = $this->get_update_data();

			/* Check if themes update data exists */
			if( isset( $group_data['themes'] ) && !empty( $group_data['themes'] ) ){

				/* Get all installed themes */
				$get_themes = wp_get_themes();
				$installed_themes = array();
				foreach( $get_themes as $get_theme ){
					$installed_themes[$get_theme->get_stylesheet()] = array(
						'Version'  => $get_theme->get( 'Version' ),
						'ThemeURI' => $get_theme->get( 'ThemeURI' ),
					);
				}

				/* Themes update data */
				$themes_update_data = array_intersect_key( $group_data['themes'], $installed_themes );

				/* Check and loop */
				if( !empty( $themes_update_data ) ){

					/* Loop each theme */
					foreach( $themes_update_data as $theme => $update_data ){

						/* Check if new version available */
						if( version_compare( $installed_themes[$theme]['Version'], $update_data['version'], "<" ) ){

							$data = array(
								'theme'       => $theme,
								'new_version' => $update_data['version'],
								'url'         => $installed_themes[$theme]['ThemeURI'],
								'package'     => $update_data['download_link'],
							);

							/* Add update data */
							$value->response[$theme] = $data;
						}
						else{
							unset( $value->response[$theme] );
						}
					}
				}
			}
		}
		return $value;
	}

	/**
	 * Add plugin update data if available
	 */
	public function add_plugin_update_data( $value, $transient ){

		/* Check if "response" object is set */
		if( isset( $value->response ) ){

			/* New data from server */
			$group_data = $this->get_update_data();

			/* Check if plugins update data exists */
			if( isset( $group_data['plugins'] ) && !empty( $group_data['plugins'] ) ){

				/* Get all installed plugins */
				$installed_plugins = get_plugins();

				/* Plugins update data */
				$plugins_update_data = array_intersect_key( $group_data['plugins'], $installed_plugins );

				/* Check and loop */
				if( !empty( $plugins_update_data ) ){

					/* Loop each plugin */
					foreach( $plugins_update_data as $plugin => $update_data ){

						/* Check if new version available */
						if( version_compare( $installed_plugins[$plugin]['Version'], $update_data['version'], "<" ) ){

							$data = new stdClass;
							$data->id          = '';
							$data->slug        = $plugin;
							$data->plugin      = $plugin;
							$data->new_version = $update_data['version'];
							$data->package     = $update_data['download_link'];
							$data->tested      = $update_data['tested'];

							/* Add update data */
							$value->response[$plugin] = $data;
						}
						else{
							unset( $value->response[$plugin] );
						}
					}
				}
			}
		}
		return $value;
	}

	/**
	 * Update Info
	 */
	public function plugin_update_info( $res, $action, $args ){

		/* Check if this plugin info requested. */
		if( 'plugin_information' == $action ){

			/* New data from server */
			$group_data = $this->get_update_data();

			/* Check if it's one of our plugin. */
			if( isset( $group_data['plugins'] ) && !empty( $group_data['plugins'] ) && array_key_exists( $args->slug, $group_data['plugins'] ) ){

				/* Get all installed plugins */
				$installed_plugins = get_plugins();

				/* Update data */
				$update_data = $group_data['plugins'][$args->slug];

				/* This plugin data */
				$data = new stdClass;
				$data->name             = $installed_plugins[$args->slug]['Name'];
				$data->slug             = $args->slug;
				$data->external         = true;
				$data->version          = $update_data['version'];
				$data->requires         = $update_data['requires'];
				$data->tested           = $update_data['tested'];
				$data->last_updated     = $update_data['last_updated'];
				$data->sections         = $update_data['sections'];
				$data->download_link    = $update_data['download_link'];

				/* Add it */
				$res = $data;
			}
		}

		return $res;
	}

	/**
	 * Get update data from server
	 */
	public function get_update_data(){

		/* Get WP Version */
		global $wp_version;

		/* Var default */
		$update_data = array(
			'themes'       => array(),
			'plugins'      => array(),
		);

		/* Remote Options */
		$options = array(
			'timeout'    => 20,
			'body'       => $this->config['post'],
			'user-agent' => 'WordPress/' . $wp_version . '; ' . get_bloginfo('url'),
		);
		/* Remote URL (HTTP) */
		$url = $http_url = add_query_arg(
			array(
				'fx_updater' => 'group',
				'id'         => $this->config['repo_group'],
			),
			set_url_scheme( $this->config['repo_uri'], 'http' )
		);
		if ( $ssl = wp_http_supports( array( 'ssl' ) ) ){
			$url = set_url_scheme( $url, 'https' );
		}

		/* Try HTTPS */
		$raw_response = wp_remote_post( esc_url_raw( $url ), $options );

		/* Fail, try HTTP */
		if ( is_wp_error( $raw_response ) ) {
			$raw_response = wp_remote_post( $http_url, $options );
		}

		/* Still Fail, bail. */
		if ( is_wp_error( $raw_response ) || 200 != wp_remote_retrieve_response_code( $raw_response ) ) {
			return $update_data;
		}

		/* Decode to array */
		$response = json_decode( trim( wp_remote_retrieve_body( $raw_response ) ), true );

		/* If themes or plugins is set, add data. */
		if( isset( $response['themes'] ) || isset( $response['plugins'] ) ){
			$update_data = $response;
		}

		return $update_data;
	}

	/**
	 * Fix theme folder
	 */
	public function fix_theme_folder( $source, $remote_source, $upgrader ){

		/* If theme name is set */
		if( isset( $upgrader->skin->theme_info->stylesheet ) ){

			/* Theme */
			$theme = $upgrader->skin->theme_info->stylesheet;

			/* New data from server */
			$group_data = $this->get_update_data();

			/* Get all installed themes */
			$get_themes = wp_get_themes();
			$installed_themes = array();
			foreach( $get_themes as $get_theme ){
				$installed_themes[$get_theme->get_stylesheet()] = array(
					'Version'  => $get_theme->get( 'Version' ),
					'ThemeURI' => $get_theme->get( 'ThemeURI' ),
				);
			}

			/* Themes update data */
			$themes_update_data = array_intersect_key( $group_data['themes'], $installed_themes );

			/* Only in our theme */
			if( array_key_exists( $theme, $themes_update_data ) ){

				/* Add notification feedback text */
				$upgrader->skin->feedback( 'Trying to rename theme folder...' );

				/* only if everything is set */
				if( isset( $source, $remote_source ) ){

					/* Set new source to correct theme folder */
					$new_source = $remote_source . '/' . $theme . '/';

					/* rename the folder */
					if( @rename( $source, $new_source ) ){
						$upgrader->skin->feedback( _x( 'Renamed theme folder successfully.', 'updater', '{{domain}}' ) );
						return $new_source;
					}
					/* Unable to rename the folder to correct theme folder */
					else{
						$upgrader->skin->feedback( _x( 'Unable to rename updated theme.', 'updater', '{{domain}}' ) );
						return new WP_Error();
					}
				}
				/* Fallback */
				else{
					$upgrader->skin->feedback( _x( 'Source or Remote Source is unavailable.', 'updater', '{{domain}}' ) );
				}
			}
		}
		return $source;
	}

	/**
	 * Fix Plugin Folder
	 */
	public function fix_plugin_folder( $true, $hook_extra, $result ){

		/* New data from server */
		$group_data = $this->get_update_data();

		/* Check if plugins update data exists */
		if( isset( $group_data['plugins'] ) && !empty( $group_data['plugins'] ) ){

			/* Check if hook extra is set */
			if ( isset( $hook_extra['plugin'] ) && array_key_exists( $hook_extra['plugin'], $group_data['plugins'] ) ){

				$plugin = $hook_extra['plugin'];
				$plugin_folder = dirname( $plugin );

				/* wp_filesystem api */
				global $wp_filesystem;

				/* Move & Activate */
				$proper_destination = trailingslashit( WP_PLUGIN_DIR ) . $plugin_folder;
				$wp_filesystem->move( $result['destination'], $proper_destination );
				$result['destination'] = $proper_destination;
				$activate = activate_plugin( $plugin );

				/* Update message */
				echo is_wp_error( $activate ) ? _x( 'Plugin could not be reactivated.', 'updater', '{{domain}}' ) : _x( 'Plugin reactivated successfully.', 'updater', '{{domain}}' );
			}
		}

		return $true;
	}
}

